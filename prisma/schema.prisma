// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// Member
model User {
  userId     String    @id @default(uuid())
  userName   String   
  loginType Int  


  // 1 : 1
  authentication Authentication?
  profile        Profile?
  password       Password?
  socialLogin    SocialLogin?

  // 1 : N
  posts          Post[]
  comments       Comment[]
}

model Authentication {
  authenticationId  String  @id @default(uuid())
  email             String 
  cellPhone         String  
  userId            String  @unique 
  user              User    @relation(fields: [userId], references: [userId])
  getherAgree       Boolean
  birthday          String
  sex               Int
  authDate          DateTime @default(now())

  @@unique([email,cellPhone])
}

model Profile {
  profileId    Int       @default(autoincrement()) @id
  userId       String    @unique
  user         User      @relation(fields: [userId], references: [userId])
  nickname     String 
  imageUrl     String
  introduction String
  languageType Int
  joinDate     DateTime  @default(now())
  updateDate   DateTime  @default(now())

  @@unique([userId, nickname])
}

// Auth
model Password {
  passwordId Int        @default(autoincrement()) @id
  userId     String     @unique
  user       User       @relation(fields: [userId], references: [userId])
  password   String 
  updateDate DateTime   @default(now())
}

model SocialLogin {
  socialLoginId Int       @id @default(autoincrement())
  userId        String    @unique  
  user          User      @relation(fields: [userId], references: [userId])
  socialCode    Int     
  accessToken   String  
  updateDate    DateTime
}

// Post
model Post {
  postId      Int       @id   @default(autoincrement()) 
  authorId    String    @unique
  author      User      @relation(fields: [authorId], references: [userId])
  createDate  DateTime  @default(now())
  updateDate  DateTime  @default(now())
  content     String
  hits        Int       @default(0)

  location    Location?                 // 1:1
  categories  CategoriesOnPosts[]       // 1:N
  comments    Comment[]                 // 1:N
  
}

model Comment {
  commentId      Int       @id @default(autoincrement())
  depth          Int       
  postId         Int       @unique
  post           Post      @relation(fields: [postId], references: [postId])
  authorId       String    @unique
  author         User      @relation(fields: [authorId], references: [userId])
  createDate     DateTime  @default(now())
  updateDate     DateTime  @default(now())

  childCommentId Int?
  childComment   Comment?  @relation("childComment",fields: [childCommentId],references: [commentId])
  comments       Comment[] @relation("childComment")
}

model Category {
  categoryId    Int     @id @default(autoincrement())
  name          String
  posts         CategoriesOnPosts[]
}

model CategoriesOnPosts{
  post            Post     @relation(fields: [postId], references: [postId])
  postId          Int   
  category        Category @relation(fields: [categoryId], references: [categoryId])
  categoryId      Int   

  @@id([postId,categoryId])
}

model Location {
  locationId  Int     @id  @default(autoincrement())
  postId      Int     @unique
  post        Post    @relation(fields: [postId],references: [postId])
  location    String
}

